download.file("http://www.openintro.org/stat/data/nc.RData"
,
destfile
=
"nc.RData"
)
load
(
"nc.RData"
)
download.file("http://www.openintro.org/stat/data/nc.RData", destfile="nc.RData")
getwd()
load("nc.RData")
View(nc)
View(nc)
summary(nc)
by
(
nc
$
weight
,
nc
$
habit
,
mean
)
by(nc$weight,nc$habit,mean)
install.packages("devtools")
library(devtools)
install_github("RDruid", "metamx")
library(RDruid)
# Number of edits and average number of characters added / deleted for a given wikipedia page
druid.query.timeseries(
url = druid.url("<hostname>", port=8080),
dataSource   = "wikipedia",
intervals    = interval(
fromISO("2013-02-24T00:00:00-08:00"),
fromISO("2013-02-28T00:00:00-08:00")
),
aggregations = list(
sum(metric("added")),
sum(metric("deleted")),
edits = sum(metric("count")) # alias sum("count") as "edits"
),
postAggregations = list(
average_added = field("added") / field("edits"),
average_deleted = -1 * field("deleted") / field("edits")
),
filter       =   dimension("namespace") == "article"
& dimension("page") == "85th_Academy_Awards",
granularity  = granularity("PT1H", timeZone="America/Los_Angeles")
)
# it allows two different plots in the same frame
par(mfrow = c(1,2))
# plot a ROC curve for a single prediction run
# and color the curve according to cutoff.
library(ROCR)
data(ROCR.simple)
pred <- prediction(ROCR.simple$predictions, ROCR.simple$labels)
perf <- performance(pred,"tpr", "fpr")
plot(perf,colorize = TRUE)
# plot a ROC curve for a single prediction run
# with CI by bootstrapping and fitted curve
library(verification)
roc.plot(ROCR.simple$labels,ROCR.simple$predictions, xlab = "False positive rate",
ylab = "True positive rate", main = NULL, CI = T, n.boot = 100, plot = "both", binormal = TRUE)
install.packages("ROCR")
install.package("gplots")
install.packages(gplots)
library(ROCR)
data(ROCR.simple)
install.packages("ROCR")
install.packages("gplots")
install.packages("gplots")
library(ggplot2)
library(ROCR)
install.package("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
library(ROCR)
install.packages("ROCR")
library(ggplot2)
library(ROCR)
install.packages("pROC")
library(pROC)
roc(response = aSAH$outcome, predictor = aSAH$wfns, partial.auc = c(100, 90), partial.auc.correct = TRUE, percent = TRUE)
data(aSAH)
roc(response = aSAH$outcome, predictor = aSAH$wfns, partial.auc = c(100, 90), partial.auc.correct = TRUE, percent = TRUE)
roc(response = aSAH$outcome, predictor = aSAH$wfns, partial.auc = c(100, 90), partial.auc.correct = TRUE, percent = TRUE)
roc(aSAH$outcome, aSAH$s100b)
roc(outcome ~ s100b, aSAH)
roc1 <- roc(aSAH$outcome,
aSAH$s100b, percent=TRUE,
# arguments for auc
partial.auc=c(100, 90), partial.auc.correct=TRUE,
partial.auc.focus="sens",
# arguments for ci
ci=TRUE, boot.n=100, ci.alpha=0.9, stratified=FALSE,
# arguments for plot
plot=TRUE, auc.polygon=TRUE, max.auc.polygon=TRUE, grid=TRUE,
print.auc=TRUE, show.thres=TRUE)
# Add to an existing plot. Beware of 'percent' specification!
roc2 <- roc(aSAH$outcome, aSAH$wfns,
plot=TRUE, add=TRUE, percent=roc1$percent)
install.packages("openintro")
library(openinfo)
library(openintro)
sapply(email[1,],class)
install.packages("class")
install.packages("ROCR")
install.packages("gplots")
library(languageR)
install.packages("languageR")
library("languageR")
head(verbs)
exit
quit
exit
q()
library(ggmap)
install.packages("ggmap")
library(ggmap)
url <- "http://comcat.cr.usgs.gov/earthquakes/feed/search.php?maxEventLatitude=45&minEventLatitude=35&minEventLongitude=-10&maxEventLongitude=5&minEventTime=953683200000&maxEventTime=1364688000000&minEventMagnitude=-1.0&maxEventMagnitude=10&minEventDepth=0.0&maxEventDepth=800.0&format=csv"
terremotos <- read.csv(url)
# obtengo un mapa
pen.iber <- get_map( location = c(-9.5, 36, 3.5, 44),
color = "color",
maptype = "roadmap")
# le aÃ±ado puntos
ggmap(pen.iber) +
geom_point(aes(x = Longitude, y = Latitude,
size = Magnitude),
data = terremotos, colour = 'red',
alpha = 0.2)
library(rplos)
install.packages("rplos")
library(rplos)
plot_throughtime(list("reproducible science"), 500)
library(rplos)
options(PlosApiKey = "Hyo6EfCzf1pTNdQ")
plot_throughtime(list("reproducible science"), 500)
data.frame?
;
?data.frame
price <- data.frame(cbind(1, 1:10))
price
size <- c(0.80,0.90, 1.00, 1.10, 1.40, 1.40, 1.50, 1.60, 1.80, 2.00, 2.40, 2.50, 2.70, 3.20, 3.50)
price <- c(70, 83, 74, 93, 89, 58, 85, 114, 95, 100, 138, 111, 124, 161, 172)
price <- data.frame(cbind(size, price))
price
colnames(houseprices)
size <- c(80,90, 100, 110, 140, 140, 150, 160, 180, 200, 240, 250, 270, 320, 350)
price <- c(70, 83, 74, 93, 89, 58, 85, 114, 95, 100, 138, 111, 124, 161, 172)
houseprices <- data.frame(cbind(size, price))
colnames(houseprices)
houseprices
plot(size, price)
plot(size, price, xlabel="Square meters", ylabel="Price (K)")
plot(size, price, xlabel="Square meters", ylabel="Price K")
plot(size, price, xlab="Square meters", ylab="Price (K)")
plot(size, price)
plot(size, price, xlab="Square meters", ylab="Price (K)", main="Predict House Price")
plot(size, price, xlab="Square meters", ylab="Price ($$ K)", main="Predict House Price")
model.regression <- lm(price ~ size)
abline(model.regression)
abline(model.regression, col=red)
abline?
sdf
?abline
abline(model.regression, col=2)
abline(model.regression, col=2, lwd=3)
predict(model.regression, 150)
predict(model.regression, 150, houseprices)
predict(model.regression, houseprices)
corr(size, price)
cor(size, price)
model.regression
model.regression$coefficients[0]
model.regression$coefficients(0)
model.regression$coefficients[1]
model.regression$coefficients[2]
sizequery <- 120
model.regression$coefficients[1] + sizequery*model.regression$coefficients[2]
?line
result <- model.regression$coefficients[1] + sizequery*model.regression$coefficients[2]
model.regression <- lm(price ~ size)
abline(model.regression, col=2, lwd=3)
line(0 sizequery)
line(0, sizequery)
?line
lines(0, sizequery)
lines(0, sizequery)
lines(100, 120)
abline(100, 120)
abline(h = -1:200, v = -2:300, col = "lightgray", lty = 3)
abline(h = -1:200, v = -2:300, col = "lightgray", lty = 3)
abline(h = -1:200, v = -2:300, col = "lightgray", lty = 3)
abline(h = -1:200, v = -2:300, col = "lightgray", lty = 3)
require(stats)
sale5 <- c(6, 4, 9, 7, 6, 12, 8, 10, 9, 13)
plot(sale5)
abline(lsfit(1:10, sale5))
abline(lsfit(1:10, sale5, intercept = FALSE), col = 4) # less fitting
abline(a = coef(mC), b = 0, col = "blue")
z <- lm(dist ~ speed, data = cars)
plot(cars)
abline(z) # equivalent to abline(reg = z) or
abline(coef = coef(z))
## trivial intercept model
abline(mC <- lm(dist ~ 1, data = cars)) ## the same as
abline(a = coef(mC), b = 0, col = "blue")
plot(cars, main = "Stopping Distance versus Speed")
lines(stats::lowess(cars))
abline(v=3, col="purple")
size <- c(80,90, 100, 110, 140, 140, 150, 160, 180, 200, 240, 250, 270, 320, 350)
price <- c(70, 83, 74, 93, 89, 58, 85, 114, 95, 100, 138, 111, 124, 161, 172)
houseprices <- data.frame(cbind(size, price))
plot(size, price, xlab="Square meters", ylab="$ Price (K)", main="Predict House Price", )
model.regression <- lm(price ~ size)
abline(model.regression, col=2, lwd=3)
abline(v=sizequery, col="purple")
abline(h=result, col="purple")
?abline
plot(size, price, xlab="Square meters", ylab="$ Price (K)", main="Predict House Price",pch=19)
model.regression <- lm(price ~ size)
abline(model.regression, col=2, lwd=3)
abline(h=result, v=sizequery, col="purple")
abline(h=result, v=sizequery, col="purple")
abline(h=result, v=sizequery, col="blue", lty="dotted", cex=2)
abline(h=result, v=sizequery, col="blue", lty="dotted", cex=2)
size <- c(80,90, 100, 110, 140, 140, 150, 160, 180, 200, 240, 250, 270, 320, 350)
price <- c(70, 83, 74, 93, 89, 58, 85, 114, 95, 100, 138, 111, 124, 161, 172)
houseprices <- data.frame(cbind(size, price))
plot(size, price, xlab="Square meters", ylab="$ Price (K)", main="Predict House Price",pch=19)
model.regression <- lm(price ~ size)
abline(model.regression, col=2, lwd=3)
sizequery <- 120
result <- model.regression$coefficients[1] + sizequery*model.regression$coefficients[2]
line(0, sizequery)
abline(v=sizequery, col="purple")
abline(h=result, v=sizequery, col="blue", lty="dotted", cex=2)
size <- c(80,90, 100, 110, 140, 140, 150, 160, 180, 200, 240, 250, 270, 320, 350)
price <- c(70, 83, 74, 93, 89, 58, 85, 114, 95, 100, 138, 111, 124, 161, 172)
houseprices <- data.frame(cbind(size, price))
plot(size, price, xlab="Square meters", ylab="$ Price (K)", main="Predict House Price",pch=19)
model.regression <- lm(price ~ size)
abline(model.regression, col=2, lwd=3)
# y = ax + b
sizequery <- 120
result <- model.regression$coefficients[1] + sizequery*model.regression$coefficients[2]
line(0, sizequery)
abline(v=sizequery, col="purple")
abline(h=result, v=sizequery, col="blue", lty="dotted")
abline(h=result, v=sizequery, col="blue", lty="dotted")
size <- c(80,90, 100, 110, 140, 140, 150, 160, 180, 200, 240, 250, 270, 320, 350)
price <- c(70, 83, 74, 93, 89, 58, 85, 114, 95, 100, 138, 111, 124, 161, 172)
houseprices <- data.frame(cbind(size, price))
plot(size, price, xlab="Square meters", ylab="$ Price (K)", main="Predict House Price",pch=19)
model.regression <- lm(price ~ size)
abline(model.regression, col=2, lwd=3)
# y = ax + b
sizequery <- 120
result <- model.regression$coefficients[1] + sizequery*model.regression$coefficients[2]
abline(h=result, v=sizequery, col="blue", lty="dotted")
size <- c(80,90, 100, 110, 140, 140, 150, 160, 180, 200, 240, 250, 270, 320, 350)
price <- c(70, 83, 74, 93, 89, 58, 85, 114, 95, 100, 138, 111, 124, 161, 172)
houseprices <- data.frame(cbind(size, price))
plot(size, price, xlab="Square meters", ylab="$ Price (K)", main="Predict House Price",pch=19)
model.regression <- lm(price ~ size)
abline(model.regression, col=2, lwd=3)
# y = ax + b
sizequery <- 120
result <- model.regression$coefficients[1] + sizequery*model.regression$coefficients[2]
abline(h=result, v=sizequery, col="blue", lty="dotdash")
sizequery <- 300
result <- model.regression$coefficients[1] + sizequery*model.regression$coefficients[2]
abline(h=result, v=sizequery, col="blue", lty="dotdash")
?avline
?abline
size <- c(80,90, 100, 110, 140, 140, 150, 160, 180, 200, 240, 250, 270, 320, 350)
price <- c(70, 83, 74, 93, 89, 58, 85, 114, 95, 100, 138, 111, 124, 161, 172)
houseprices <- data.frame(cbind(size, price))
#
model.regression <- lm(houseprices$price ~ houseprices$size)
Title
install.packages("knitr")
Title
#Holaaa
REGRESSION PROBLEM
Predict House Price
========================================================
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **MD** toolbar button for help on Markdown).
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
REGRESSION PROBLEM
Predict House Price
========================================================
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **MD** toolbar button for help on Markdown).
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
REGRESSION PROBLEM
Predict House Price
========================================================
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **MD** toolbar button for help on Markdown).
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
REGRESSION PROBLEM
Predict House Price
========================================================
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **MD** toolbar button for help on Markdown).
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
#### May 9, 2013
#### Jose MarÃ­a Gomez Hidalgo (@jmgomez)
========================================================
install.packages(c("class"))
install.packages(c("class"))
install.packages(c("e1071"))
install.packages(c("ROCR"))
gwtwd()
getwd()
WORKING_DIR <- "~/R/RStats/Data Analysis/"
getwd()
WORKING_DIR <- "~/R/RStats/Data Analysis/"
DATASET_FILE <- "./data/quakesRaw.rda"
FIGURES_DIR <- "./figures/"
setwd(WORKING_DIR)
getwd()
install.packages("RWeka")
install.packages("RJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
