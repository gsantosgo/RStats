install.packages(c("class"))
install.packages(c("e1071"))
install.packages(c("ROCR"))
install.packages("rJava")
install.packages("rJava")
install.packages("RWeka")
iris
classifier <- IBk(class ~., data = iris)
library(RWeka)
library(rJava)
library(rJava)
library(RWeka)
classifier <- IBk(class ~., data = iris)
m1 <- J48(Species ~ ., data = iris)
summary(m1)
getwd()
WORKING_DIR <- "~/R/MadridJUG - DataMining/"
#WORKING_DIR <- "C:/Users/gsantos/R/RStats/MadridJUG-DataMining"
DATASET_DIR <- "./data/"
FIGURES_DIR <- "./figure/"
COLORS <- c('white','black')
setwd(WORKING_DIR)
getwd()
getwd()
WORKING_DIR <- "~/R/MadridJUG - DataMining/"
setwd(WORKING_DIR)
setwd(WORKING_DIR)
prediction.rpart <- predict(model.rpart, newdata=samsungData.test, type='class')
getwd()
getwd()
WORKING_DIR <- "~/R/RStats/Data Analysis/"
setwd()
getwd()
WORKING_DIR <- "~/R/RStats/Data Analysis/"
setwd(WORKING_DIR)
source("samsungPredictive.R")
source("samsungPredictive.R")
source("samsungPredictive.R")
load("./data/samsungData.rda")
set.seed(1423)
index <- 1:nrow(DATASET)
print ("Training: 66.66% ")
trainindex <- sample(index, trunc(length(index)*0.6666666666666667))
table(dataset.test$spam)
getwd()
WORKING_DIR <- "~/R/RStats/MadridJUG-DataMining"
#WORKING_DIR <- "C:/Users/gsantos/R/RStats/MadridJUG-DataMining"
FIGURES_DIR <- "./figures/"
setwd(WORKING_DIR)
getwd()
library(knitr)
library(RColorBrewer)
library(gridBase)
library(RColorBrewer)
library(ElemStatLearn)
library(foreign)
library(tree)
library(rpart)
library(maptree)
#install.packages("class") #not work in  2.15.2
#library(class) #k Nearest Neighbors
library(e1071) # Support Vector Machine
library(ROCR)
CUSTOM_COLORS_PLOT <- colorRampPalette(brewer.pal(10,"Set3"))
# Figures Label
opts_chunk$set(echo=FALSE, fig.path='figures/plot-spam-', cache=TRUE)
DATASET <- spam
head(DATASET)
dim(DATASET)
nrow(DATASET)
ncol(DATASET)
colnames(DATASET)
sapply(DATASET[1,], class)
sum(is.na(DATASET))
summary(DATASET)
### Change Column Names
```{r, dependson="loadData"}
newColNames <- c("word_freq_make",
"word_freq_address",
"word_freq_all",
"word_freq_3d",
"word_freq_our",
"word_freq_over",
"word_freq_remove",
"word_freq_internet",
"word_freq_order",
"word_freq_mail",
"word_freq_receive",
"word_freq_will",
"word_freq_people",
"word_freq_report",
"word_freq_addresses",
"word_freq_free",
"word_freq_business",
"word_freq_email",
"word_freq_you",
"word_freq_credit",
"word_freq_your",
"word_freq_font",
"word_freq_000",
"word_freq_money",
"word_freq_hp",
"word_freq_hpl",
"word_freq_george",
"word_freq_650",
"word_freq_lab",
"word_freq_labs",
"word_freq_telnet",
"word_freq_857",
"word_freq_data",
"word_freq_415",
"word_freq_85",
"word_freq_technology",
"word_freq_1999",
"word_freq_parts",
"word_freq_pm",
"word_freq_direct",
"word_freq_cs",
"word_freq_meeting",
"word_freq_original",
"word_freq_project",
"word_freq_re",
"word_freq_edu",
"word_freq_table",
"word_freq_conference",
"char_freq_ch;",
"char_freq_ch(",
"char_freq_ch[",
"char_freq_ch!",
"char_freq_ch$",
"char_freq_ch#",
"capital_run_length_average",
"capital_run_length_longest",
"capital_run_length_total",
"spam")
length(newColNames)
colnames(DATASET) <- newColNames
colnames(DATASET)
class(DATASET$spam)
levels(DATASET$spam)
result <- table(DATASET$spam)
numEmail <- result[["email"]]
numEmail
(numEmail/nrow(DATASET))*100
numSpam <- result[["spam"]]
numSpam
(numSpam/nrow(DATASET))*100
set.seed(1423)
index <- 1:nrow(DATASET)
trainIndex <- sample(index, trunc(length(index)*0.6666666666666667))
DATASET.train <- DATASET[trainIndex, ]
DATASET.test <- DATASET[-trainIndex, ]
pc <- proc.time()
model.rpart <- rpart(spam ~ . ,method="class", data=DATASET.train)
proc.time() - pc
printcp(model.rpart)
plot(model.rpart, uniform=TRUE, main="Classification (RPART). Classification Tree for SPAM")
text(model.rpart, all=TRUE ,cex=.75)
draw.tree(model.rpart, cex=0.5, nodeinfo=TRUE, col=gray(0:8 / 8))
prediction.rpart <- predict(model.rpart, newdata=DATASET.test, type='class')
table("Actual Class" = DATASET.test$spam, "Predicted Class" = prediction.rpart)
error.rate.rpart <- sum(DATASET.test$activity != prediction.rpart) / nrow(DATASET.test)
print (paste0("Accuary (Precision): ", 1 - error.rate.rpart))
prediction.rpart <- predict(model.rpart, newdata=DATASET.test, type='class')
table("Actual Class" = DATASET.test$spam, "Predicted Class" = prediction.rpart)
error.rate.rpart <- sum(DATASET.test$spam != prediction.rpart) / nrow(DATASET.test)
print (paste0("Accuary (Precision): ", 1 - error.rate.rpart))
pc <- proc.time()
model.svm <- svm(spam~., method="class", data=DATASET.train)
proc.time() - pc
summary(model.svm)
prediction.svm <- predict(model.svm, newdata=DATASET.test, type='class')
table("Actual Class" = DATASET.test$spam, "Predicted Class" = prediction.svm)
error.rate.svm <- sum(DATASET.test$spam != prediction.svm) / nrow(DATASET.test)
print (paste0("Accuary (Precision): ", 1 - error.rate.svm))
install.packages("gridBase")
install.packages("adabag")
install.packages("ipred")
install.packages("randomForest")
install.packages("class")
install.packages("class")
install.packages("class")
install.packages("FNN")
install.packages("class")
getwd()
WORKING_DIR <- "~/R/RStats/MadridJUG-DataMining/"
#WORKING_DIR <- "C:/Users/gsantos/R/RStats/MadridJUG-DataMining"
DATASET_DIR <- "./data/"
FIGURES_DIR <- "./figures/"
COLORS <- c('white','black')
setwd(WORKING_DIR)
getwd()
library(knitr) # Markdown
library(RColorBrewer)
library(ElemStatLearn)
library(foreign) # For reading and writing data stored by statistical packages such as Minitab,S,SAS,SPSS
library(tree)
library(maptree)
library(rpart) # Recursive Partitioning and Regression Trees (RPart)
library(RWeka) # Weka
library(FNN) # Fast k-Nearest Neighbors (kNN)
library(e1071) # Support Vector Machine (SVM)
search()
CUSTOM_COLORS <- colorRampPalette(colors=COLORS)
CUSTOM_COLORS_PLOT <- colorRampPalette(brewer.pal(10,"Set3"))
# Figures Label
opts_chunk$set(fig.path='figures/plot-handwritten')
DATASET.train <- as.data.frame(zip.train)
DATASET.test <- as.data.frame(zip.test)
DATASET.train[,1] <- as.factor(DATASET.train[,1]) # As Category
colnames(DATASET.train) <- c("Y",paste("X.",1:256,sep=""))
class(DATASET.train[,1])
levels(DATASET.train[,1])
sapply(DATASET.train[1,], class)
DATASET.test[,1] <- as.factor(DATASET.test[,1]) # As Category
colnames(DATASET.test) <- c("Y",paste("X.",1:256,sep=""))
class(DATASET.test[,1])
levels(DATASET.test[,1])
sapply(DATASET.test[1,], class)
par(mfrow=c(4,4),pty='s',mar=c(3,3,3,3),xaxt='n',yaxt='n')
for(i in 1:10)
{
z <- array(as.vector(as.matrix(DATASET.train[i,-1])),dim=c(16,16))
z <- z[,16:1] ##right side up
image(1:16,1:16,z,main=DATASET.train[i,1],col=CUSTOM_COLORS(256))
print(i)
}
par(mfrow=c(4,4),pty='s',mar=c(3,3,3,3),xaxt='n',yaxt='n')
for(i in 1:10)
{
z <- array(as.vector(as.matrix(DATASET.train[i,-1])),dim=c(16,16))
z <- z[,16:1] ##right side up
image(1:16,1:16,z,main=DATASET.train[i,1],col=CUSTOM_COLORS(256))
print(i)
}
par(mfrow=c(4,4),pty='s',mar=c(3,3,3,3),xaxt='n',yaxt='n')
for(i in 1:10)
{
z <- array(as.vector(as.matrix(DATASET.train[i,-1])),dim=c(16,16))
z <- z[,16:1] ##right side up
image(1:16,1:16,z,main=DATASET.train[i,1],col=CUSTOM_COLORS(256))
print(i)
}
pc <- proc.time()
model.fnn <- knn(DATASET.train, DATASET.test, DATASET.train$Y, k = 10, algorithm="cover_tree")
proc.time() - pc
pc <- proc.time()
model.fnn <- fnn.knn(DATASET.train, DATASET.test, DATASET.train$Y, k = 10, algorithm="cover_tree")
proc.time() - pc
summary(model.fnn)
pc <- proc.time()
model.fnn <- package:knn(DATASET.train, DATASET.test, DATASET.train$Y, k = 10, algorithm="cover_tree")
proc.time() - pc
summary(model.fnn)
pc <- proc.time()
model.fnn <- fnn::knn(DATASET.train, DATASET.test, DATASET.train$Y, k = 10, algorithm="cover_tree")
proc.time() - pc
summary(model.fnn)
pc <- proc.time()
model.fnn <- FNN::knn(DATASET.train, DATASET.test, DATASET.train$Y, k = 10, algorithm="cover_tree")
proc.time() - pc
summary(model.fnn)
DATASET.train[1,-1]
model.fnn <- FNN::knn(DATASET.train[1,-1], DATASET.test[1, -1], DATASET.train$Y, k = 10, algorithm="cover_tree")
DATASET.test[1, -1]
model.fnn <- FNN::knn(DATASET.train[1,-1], DATASET.test[1, -1], DATASET.train$Y, k = 10, algorithm="cover_tree")
pc <- proc.time()
model.fnn <- FNN::knn(DATASET.train[,-1], DATASET.test[, -1], DATASET.train$Y, k = 10, algorithm="cover_tree")
proc.time() - pc
summary(model.fnn)
prediction.fnn <- predict(model.fnn, newdata=DATASET.test, type='class')
prediction.fnn <- predict(model.fnn, newdata=DATASET.test)
class(model.fnn)
model.fnn.predict()
sum(model.fnn)
model.fnn
model.fnn
model.fnn
model.fnn
class(model.fnn)
class(model.fnn)
model.fnn
pc <- proc.time()
# Avoid Name Collision (knn)
model.fnn <- FNN::knn(DATASET.train[,-1], DATASET.test[, -1], DATASET.train$Y, k = 10, algorithm="cover_tree")
proc.time() - pc
summary(model.fnn)
class(summary(model.fnn))
sum(summary(model.fnn))
attr(model.fnn, "nn.index")
attr(model.fnn)
attr(model.fnn)
?attr
head(model.fnn)
head(model.fnn,10)
head(model.fnn,20)
head(model.fnn,2007)
head(model.fnn,3000)
table("Actual Class"=DATASET.test$Y, "Predicted Class"=model.fnn)
table("Actual Class"=DATASET.test$Y, "Predicted Class"=model.fnn)
error.rate.fnn <- sum(DATASET.test$Y != model.fnn) / nrow(DATASET.test)
print (paste0("Accuary (Precision): ", 1 - error.rate.fnn))
DATASET.test[row,]
DATASET.test[1,]
model.fnn[row]
model.fnn[row,]
row <- 1
model.fnn[row,]
model.fnn[row]
row <- 1
prediction.digit <- model.fnn[row]
print (paste0("Current Digit: ", as.character(DATASET.test$Y[row])))
print (paste0("Predicted Digit: ", prediction.digit))
par(mfrow=c(1,3),pty='s',mar=c(1,1,1,1),xaxt='n',yaxt='n')
z <- array(as.vector(as.matrix(DATASET.test[row,-1])),dim=c(16,16))
z <- z[,16:1] ##right side up
image(1:16,1:16,z,main=DATASET.test[row,1],col=CUSTOM_COLORS(256))
DATASET.test$Y != model.fnn
row <- 13
prediction.digit <- model.fnn[row]
print (paste0("Current Digit: ", as.character(DATASET.test$Y[row])))
print (paste0("Predicted Digit: ", prediction.digit))
par(mfrow=c(1,3),pty='s',mar=c(1,1,1,1),xaxt='n',yaxt='n')
z <- array(as.vector(as.matrix(DATASET.test[row,-1])),dim=c(16,16))
z <- z[,16:1] ##right side up
image(1:16,1:16,z,main=DATASET.test[row,1],col=CUSTOM_COLORS(256))
DATASET.test$Y != model.fnn
DATASET[DATASET.test$Y != model.fnn]
DATASET[DATASET.test$Y != model.fnn,]
DATASET[DATASET.test$Y != model.fnn,]
DATASET.test$Y
which(DATASET.test$Y != model.fnn)
sum(which(DATASET.test$Y != model.fnn)
)
length(which(DATASET.test$Y != model.fnn)
length(which(DATASET.test$Y != model.fnn)
length(which(DATASET.test$Y != model.fnn))
length(DATASET.test$Y)
which(DATASET.test$Y != model.fnn)
row <- 18
prediction.digit <- model.fnn[row]
print (paste0("Current Digit: ", as.character(DATASET.test$Y[row])))
print (paste0("Predicted Digit: ", prediction.digit))
par(mfrow=c(1,3),pty='s',mar=c(1,1,1,1),xaxt='n',yaxt='n')
z <- array(as.vector(as.matrix(DATASET.test[row,-1])),dim=c(16,16))
z <- z[,16:1] ##right side up
image(1:16,1:16,z,main=DATASET.test[row,1],col=CUSTOM_COLORS(256))
row <- 13
prediction.digit <- model.fnn[row]
print (paste0("Current Digit: ", as.character(DATASET.test$Y[row])))
print (paste0("Predicted Digit: ", prediction.digit))
par(mfrow=c(1,3),pty='s',mar=c(1,1,1,1),xaxt='n',yaxt='n')
z <- array(as.vector(as.matrix(DATASET.test[row,-1])),dim=c(16,16))
z <- z[,16:1] ##right side up
image(1:16,1:16,z,main=DATASET.test[row,1],col=CUSTOM_COLORS(256))
which(DATASET.test$Y != model.fnn)
errors <- DATASET.test[which(DATASET.test$Y != model.fnn),]
errors <- DATASET.test[which(DATASET.test$Y != model.fnn),]
par(mfrow=c(4,4),pty='s',mar=c(3,3,3,3),xaxt='n',yaxt='n')
for(i in 1:10)
{
z <- array(as.vector(as.matrix(errors[i,-1])),dim=c(16,16))
z <- z[,16:1] ##right side up
image(1:16,1:16,z,main=DATASET.errors[i,1],col=CUSTOM_COLORS(256))
print(i)
}
errors <- DATASET.test[which(DATASET.test$Y != model.fnn),]
par(mfrow=c(4,4),pty='s',mar=c(3,3,3,3),xaxt='n',yaxt='n')
for(i in 1:10)
{
z <- array(as.vector(as.matrix(errors[i,-1])),dim=c(16,16))
z <- z[,16:1] ##right side up
image(1:16,1:16,z,main=errors[i,1],col=CUSTOM_COLORS(256))
print(i)
}
errors
length(errors)
prediction.svm
View(DATASET)
rm(DATASET)
errors
errors <- DATASET.test[which(DATASET.test$Y != model.fnn),]
length(errors)
which(DATASET.test$Y != model.fnn)
errors <- as.vector(which(DATASET.test$Y != model.fnn))
errors
errors[i]
errors[2]
errors[1]
errors[2]
errors <- as.vector(which(DATASET.test$Y != model.fnn))
par(mfrow=c(4,4),pty='s',mar=c(3,3,3,3),xaxt='n',yaxt='n')
for(i in length(errors))
{
z <- array(as.vector(as.matrix(DATASET.test[errors[i],-1])),dim=c(16,16))
z <- z[,16:1] ##right side up
image(1:16,1:16,z,main=errors[errors[i],1],col=CUSTOM_COLORS(256))
print(i)
}
errors <- as.vector(which(DATASET.test$Y != model.fnn))
par(mfrow=c(4,4),pty='s',mar=c(3,3,3,3),xaxt='n',yaxt='n')
for(i in length(errors))
{
z <- array(as.vector(as.matrix(DATASET.test[errors[i],-1])),dim=c(16,16))
z <- z[,16:1] ##right side up
image(1:16,1:16,z,main=DATASET.test[errors[i],1],col=CUSTOM_COLORS(256))
print(i)
}
for(i in 1:length(errors))
{
z <- array(as.vector(as.matrix(DATASET.test[errors[i],-1])),dim=c(16,16))
z <- z[,16:1] ##right side up
image(1:16,1:16,z,main=DATASET.test[errors[i],1],col=CUSTOM_COLORS(256))
print(i)
}
errors <- as.vector(which(DATASET.test$Y != model.fnn))
par(mfrow=c(4,4),pty='s',mar=c(3,3,3,3),xaxt='n',yaxt='n')
for(i in 1:length(errors))
{
z <- array(as.vector(as.matrix(DATASET.test[errors[i],-1])),dim=c(16,16))
z <- z[,16:1] ##right side up
image(1:16,1:16,z,main=model.fnn[errors[i],1],col=CUSTOM_COLORS(256))
print(i)
}
model.fnn
model.fnn | more
head(model.fnn)
head(model.fnn,300)
class(model.fnn)
as.vector(model.fnn)
predicted <- as.vector(model.fnn)
predicted[1]
errors <- as.vector(which(DATASET.test$Y != model.fnn))
predicted <- as.vector(model.fnn)
par(mfrow=c(4,4),pty='s',mar=c(3,3,3,3),xaxt='n',yaxt='n')
for(i in 1:length(errors))
{
z <- array(as.vector(as.matrix(DATASET.test[errors[i],-1])),dim=c(16,16))
z <- z[,16:1] ##right side up
image(1:16,1:16,z,main=predicted[errors[i]],col=CUSTOM_COLORS(256))
print(i)
}
pc <- proc.time()
model.svm <- svm(DATASET.train$Y ~ . ,method="class", data=DATASET.train)
proc.time() - pc
summary(model.svm)
prediction.svm <- predict(model.svm, newdata=DATASET.test, type='class')
table("Actual Class"=DATASET.test$Y, "Predicted Class"=prediction.svm)
error.rate.svm <- sum(DATASET.test$Y != prediction.svm) / nrow(DATASET.test)
print (paste0("Accuary (Precision): ", 1 - error.rate.svm))
row <- 1
prediction.digit <- as.vector(predict(model.svm, newdata=DATASET.test[row,], type='class'))
print (paste0("Current Digit: ", as.character(DATASET.test$Y[row])))
print (paste0("Predicted Digit: ", prediction.digit))
z <- array(as.vector(as.matrix(DATASET.test[row,-1])),dim=c(16,16))
z <- z[,16:1] ##right side up
par(mfrow=c(1,3),pty='s',mar=c(1,1,1,1),xaxt='n',yaxt='n')
image(1:16,1:16,z,main=DATASET.test[row,1],col=CUSTOM_COLORS(256))
errors <- as.vector(which(DATASET.test$Y != model.fnn))
predicted <- as.vector(model.fnn)
par(mfrow=c(4,4),pty='s',mar=c(3,3,3,3),xaxt='n',yaxt='n')
for(i in 1:length(errors))
{
z <- array(as.vector(as.matrix(DATASET.test[errors[i],-1])),dim=c(16,16))
z <- z[,16:1] ##right side up
image(1:16,1:16,z,main=predicted[errors[i]],col=CUSTOM_COLORS(256))
print(i)
}
length(errors)
errors <- as.vector(which(DATASET.test$Y != prediction.svm))
print(paste0("Error Numbers",length(errors)))
print(paste0("Error Numbers: ",length(errors)))
prediction.svm)
prediction.svm
as.vector(prediction.svm))
as.vector(prediction.svm)
errors <- as.vector(which(DATASET.test$Y != prediction.svm))
print(paste0("Error Numbers: ",length(errors)))
predicted <- as.vector(prediction.svm)
par(mfrow=c(4,4), pty='s', mar=c(3,3,3,3), xaxt='n', yaxt='n')
for(i in 1:length(errors))
{
z <- array(as.vector(as.matrix(DATASET.test[errors[i],-1])),dim=c(16,16))
z <- z[,16:1] ##right side up
image(1:16,1:16,z,main=predicted[errors[i]],col=CUSTOM_COLORS(256))
print(i)
}
errors <- as.vector(which(DATASET.test$Y != prediction.svm))
print(paste0("Error Numbers: ",length(errors)))
predicted <- as.vector(prediction.svm)
par(mfrow=c(4,4), pty='s', mar=c(3,3,3,3), xaxt='n', yaxt='n')
for(i in 1:length(errors))
{
z <- array(as.vector(as.matrix(DATASET.test[errors[i],-1])),dim=c(16,16))
z <- z[,16:1] ##right side up
image(1:16,1:16,z,main=paste0("C.D.:", as.character(DATASET.test$Y[row], "P.D.:", predicted[errors[i]]),col=CUSTOM_COLORS(256))
print(i)
}
errors <- as.vector(which(DATASET.test$Y != prediction.svm))
print(paste0("Error Numbers: ",length(errors)))
predicted <- as.vector(prediction.svm)
par(mfrow=c(4,4), pty='s', mar=c(3,3,3,3), xaxt='n', yaxt='n')
for(i in 1:length(errors))
{
z <- array(as.vector(as.matrix(DATASET.test[errors[i],-1])),dim=c(16,16))
z <- z[,16:1] ##right side up
image(1:16,1:16,z,
main=paste0("C.D.:", as.character(DATASET.test$Y[row]), "P.D.:", predicted[errors[i]]),col=CUSTOM_COLORS(256))
print(i)
}
library(gridBase)
library(gridBase)
