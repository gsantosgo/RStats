lm1 <- lm(galton$child ~ galton$parent)
parent0 <- rnorm(nobs,sd=sd(galton$parent),mean=mean(galton$parent))
child0 <- lm1$coeff[1] + lm1$coeff[2]*parent0 + rnorm(nobs,sd=summary(lm1)$sigma)
par(mfrow=c(1,2))
plot(galton$parent,galton$child,pch=19)
plot(parent0,child0,pch=19,col="blue")
lm1 <- lm(galton$child ~ galton$parent)
parent0 <- rnorm(nobs,sd=sd(galton$parent),mean=mean(galton$parent))
child0 <- lm1$coeff[1] + lm1$coeff[2]*parent0 + rnorm(nobs,sd=summary(lm1)$sigma)
par(mfrow=c(1,2))
plot(galton$parent,galton$child,pch=19)
plot(parent0,child0,pch=19,col="blue")
library(UsingR); data(galton); nobs <- dim(galton)[1]
par(mfrow=c(1,2))
hist(galton$child,col="blue",breaks=100)
hist(galton$parent,col="blue",breaks=100)
# Calculating means,variances
lm1 <- lm(galton$child ~ galton$parent)
parent0 <- rnorm(nobs,sd=sd(galton$parent),mean=mean(galton$parent))
child0 <- lm1$coeff[1] + lm1$coeff[2]*parent0 + rnorm(nobs,sd=summary(lm1)$sigma)
par(mfrow=c(1,2))
plot(galton$parent,galton$child,pch=19)
plot(parent0,child0,pch=19,col="blue")
library(bootstrap); data(stamp); nobs <- dim(stamp)[1]
hist(stamp$Thickness,col="grey",breaks=100,freq=F)
dens <- density(stamp$Thickness)
lines(dens,col="blue",lwd=3)
install.packages("bootstrap")
library(bootstrap); data(stamp); nobs <- dim(stamp)[1]
hist(stamp$Thickness,col="grey",breaks=100,freq=F)
dens <- density(stamp$Thickness)
lines(dens,col="blue",lwd=3)
plot(density(stamp$Thickness),col="black",lwd=3)
for(i in 1:10){
newThick <- rnorm(nobs,mean=mean(stamp$Thickness),sd=sd(stamp$Thickness))
lines(density(newThick),col="grey",lwd=3)
}
plot(density(stamp$Thickness),col="black",lwd=3)
for(i in 1:10){
newThick <- rnorm(nobs,mean=stamp$Thickness,sd=dens$bw)
lines(density(newThick),col="grey",lwd=3)
}
plot(density(stamp$Thickness),col="black",lwd=3)
for(i in 1:10){
newThick <- rnorm(nobs,mean=stamp$Thickness,sd=dens$bw*1.5)
lines(density(newThick,bw=dens$bw),col="grey",lwd=3)
}
set.seed(3343)
pValues = rep(NA,100)
for(i in 1:100){
z = rnorm(20)
x = rnorm(20)
y = rnorm(20,mean=0.5*x)
pValues[i] = summary(lm(y ~ x))$coef[2,4]
}
sum(p.adjust(pValues,method="bonferroni") < 0.05)
sum(p.adjust(pValues,method="BH") < 0.05)
?rlm
library(UsingR);
data(galton);
lm1 <- lm(galton$child ~ galton$parent)
parent0 <- rnorm(nobs,sd=sd(galton$parent),mean=mean(galton$parent))
child0 <- lm1$coeff[1] + lm1$coeff[2]*parent0 + rnorm(nobs,sd=summary(lm1)$sigma)
par(mfrow=c(1,2))
plot(galton$parent,galton$child,pch=19)
plot(parent0,child0,pch=19,col="blue")
set.seed(44333)
x <- rnorm(50)
e <- rnorm(50);
b0 <- 1;
b1 <- 2
y <- b0 + b1*x + e;
plot(y)
set.seed(44333)
x <- rnorm(50)
e <- rnorm(50);
b0 <- 1;
b1 <- 2
y <- b0 + b1*x + e;
plot(x,y,pch=19)
x
order(x)
x[order(x)]
tail(x[order(x)],5)
which[x == xorder ]
xorder <- tail(x[order(x)],5)
which[x == xorder ]
x %in % xorder
x %in% xorder
which[x %in% xorder]
which[x %in% xorder]
?which
which(x %in% xorder)
x[which(x %in% xorder)] <- NA
x
plot(y)
set.seed(44333)
x <- rnorm(50)
e <- rnorm(50);
b0 <- 1;
b1 <- 2
y <- b0 + b1*x + e;
xorder <- tail(x[order(x)],5)
x[which(x %in% xorder)] <- NA
b0 <- 1;
b1 <- 2
y <- b0 + b1*x + e;
plot(y)
sum(y.isna())
?is.na
sum(isna(y))
sum(is.na(y))
set.seed(44333)
x <- rnorm(50)
e <- rnorm(50);
b0 <- 1;
b1 <- 2
y <- b0 + b1*x + e;
sum(is.na(y))
xorder <- tail(x[order(x)],5)
x[which(x %in% xorder)] <- NA
b0 <- 1;
b1 <- 2
y2 <- b0 + b1*x + e;
sum(is.na(y))
par(mfrow=c(1,2))
plot(x,y,pch=19)
plot(x,y2,col="blue")
set.seed(44333)
x <- rnorm(50)
e <- rnorm(50);
b0 <- 1;
b1 <- 2
y <- b0 + b1*x + e;
sum(is.na(y))
xorder <- tail(x[order(x)],5)
x[which(x %in% xorder)] <- NA
b0 <- 1;
b1 <- 2
y2 <- b0 + b1*x + e;
sum(is.na(y))
par(mfrow=c(1,2))
plot(x,y,pch=19)
abline(y)
plot(x,y2,col="blue")
abline(y2)
set.seed(44333)
x <- rnorm(50)
e <- rnorm(50);
b0 <- 1;
b1 <- 2
y <- b0 + b1*x + e;
sum(is.na(y))
lm1 <- lm(y ~ x)
lm1
xorder <- tail(x[order(x)],5)
xorder <- tail(x[order(x)],5)
xorder <- tail(x[order(x)],5)
xorder
x2 <- x
x2[which(x2 %in% xorder)] <- NA
x2
set.seed(44333)
x <- rnorm(50)
e <- rnorm(50);
b0 <- 1;
b1 <- 2
y <- b0 + b1*x + e;
sum(is.na(y))
lm1 <- lm(y ~ x)
xorder <- tail(x[order(x)],5)
x2 <- x
x2[which(x2 %in% xorder)] <- NA
y2 <- lm1$coeff[1] + lm1$coeff[2]*x2 + rnorm(50,sd=summary(lm1)$sigma)
par(mfrow=c(1,2))
plot(x,y,pch=19)
plot(x2,y2,col="blue")
lm1$coeff[2]
?rlm
ç
b1
y2
lm1$coeff[2]
library(MASS)
library(MASS)
set.seed(44333)
x <- rnorm(50)
e <- rnorm(50);
b0 <- 1;
b1 <- 2
y <- b0 + b1*x + e;
lm1 <- rlm(y ~ x)
xorder <- tail(x[order(x)],5)
x2 <- x
x2[which(x2 %in% xorder)] <- NA
y2 <- lm1$coeff[1] + lm1$coeff[2]*x2 + rnorm(50,sd=summary(lm1)$sigma)
par(mfrow=c(1,2))
plot(x,y,pch=19)
plot(x2,y2,col="blue")
lm1$coeff[2]
library(MASS)
set.seed(44333)
x <- rnorm(50)
e <- rnorm(50);
b0 <- 1;
b1 <- 2
y <- b0 + b1*x + e;
rlm1 <- rlm(y ~ x)
xorder <- tail(x[order(x)],5)
x2 <- x
x2[which(x2 %in% xorder)] <- NA
y2 <- rlm1$coeff[1] + rlm1$coeff[2]*x2 + rnorm(50,sd=summary(rlm1)$sigma)
par(mfrow=c(1,2))
plot(x,y,pch=19)
plot(x2,y2,col="blue")
rlm1$coeff[2]
set.seed(44333)
x <- rnorm(50)
e <- rnorm(50);
b0 <- 1;
b1 <- 2
y <- b0 + b1*x + e;
lm1 <- lm(y ~ x)
xorder <- tail(x[order(x)],5)
x2 <- x
x2[which(x2 %in% xorder)] <- NA
y2 <- lm1$coeff[1] + lm1$coeff[2]*x2 + rnorm(50,sd=summary(lm1)$sigma)
par(mfrow=c(1,2))
plot(x,y,pch=19)
plot(x2,y2,col="blue")
lm1$coeff[2]
set.seed(3343)
pValues = rep(NA,100)
for(i in 1:100){
z = rnorm(20)
x = rnorm(20)
y = rnorm(20,mean=0.5*x)
pValues[i] = summary(lm(y ~ x))$coef[2,4]
}
# Controls FWER
sum(p.adjust(pValues,method="bonferroni") < 0.1)
# Controls FDR
sum(p.adjust(pValues,method="BH") < 0.1)
y <- rnorm(20)
x <- rnorm(20)
pValues[i] <- summary(lm(y ~ x))$coeff[2,4]
pValues
plot(x,y)
pValues
install.packages("gplots")
getwd()
WORKING_DIR <- "~/R/RStats/R-Social Network Analysis"
# We're gonna need these later
#install.packages(c("igraph", "twitteR"))
library(igraph)
library(twitteR)
setwd(WORKING_DIR)
getwd()
load("./data/enron_pedroc_06.Rdata")
summary(nodes); nrow(nodes)
viewData(nodes)
viewData(edges)
viewData(edges)
nodes
head(nodes)
summary(edges); nrow(edges)
summary(nodes); nrow(nodes)
summary(edges); nrow(edges)
network <- graph.data.frame(edges,
directed = TRUE,
vertices = nodes)
network <- graph.data.frame(edges,
directed = TRUE,
vertices = nodes)
network
summary(network)
class(network);summary(network)
head(network)
V(network)[1:10]
E(network)[1:10]
table(V(network)$status)
table(E(network)$date)
# CAVEAT igraph no entiende bien el formato fecha
table(edges$date)
plot(table(edges$date))
# ========================================================================
# 3- EXPORTAR el grafo a formatos externos para visualización etc
# ========================================================================
# Cuidado con el formato de fechas -hay que pasarlo a character
write.graph(network,
file = "network01.graphml",
format = "graphml")
summary(edges.full); nrow(edges.full)
edges.full$date.R <- as.POSIXct(edges.full$date)
network.full <- graph.data.frame(edges.full[,c("sender",
"receiver",
"type",
"date",
"subject")],
directed = TRUE,
vertices = nodes)
network.full <- graph.data.frame(edges.full[,c("sender",
"receiver",
"type",
"date",
"subject")],
directed = TRUE,
vertices = nodes)
class(network.full);summary(network.full)
V(network.full)[1:10]
E(network.full)[1:10]
write.graph(network.full,
file = "network02.graphml",
format = "graphml")
get.shortest.paths(from = V(network.full)$lastName == "Pereira",
to = V(network.full)$lastName == "Horton",
graph = network.full)),]
get.shortest.paths(from = V(network.full)$lastName == "Pereira",
to = V(network.full)$lastName == "Horton",
graph = network.full),]
get.shortest.paths(from = V(network.full)$lastName == "Pereira",
to = V(network.full)$lastName == "Horton",
graph = network.full)
nodes[c(138,11,132),]
diameter(network.full)
nodes[farthest.nodes(network.full),]
nodes$degree_total <- degree(network.full,
v=V(network.full),
mode = c("total"))
nodes$degree_in <- degree(network.full,
v=V(network.full),
mode = c("in"))
nodes$degree_out <- degree(network.full,
v=V(network.full),
mode = c("out"))
# Quienes son los top20 de cada uno
head(nodes[order(nodes$degree_total,
decreasing = TRUE),], n = 20L)
head(nodes[order(nodes$degree_in,
decreasing = TRUE),], n = 20L)
head(nodes[order(nodes$degree_out,
decreasing = TRUE),], n = 20L)
nodes$reach_2_step <-
neighborhood.size(network.full,
order = 2,
nodes=V(network.full),
mode = c("all"))
nodes$reach_2_step <-
neighborhood.size(network.full,
order = 2, # order = numeros de saltos
nodes=V(network.full),
mode = c("all"))
head(nodes[order(nodes$reach_2_step,
decreasing = TRUE),], n = 30L)
nodes$transitivity_ratio <-
transitivity(network.full,
vids=V(network.full),
type = "local")
head(nodes[order(nodes$transitivity_ratio,
decreasing = FALSE),], n = 20L)
V(network.full)$outdegree <- degree(network.full, mode = "out")
V(network.full)$indegree <- degree(network.full, mode = "in")
V(network.full)$degree <- degree(network.full, mode = "all")
V(network.full)$reach_2_step <-   neighborhood.size(network.full,
order = 2,
nodes=V(network.full),
mode = c("all"))
V(network.full)$transitivity_ratio <- transitivity(network.full,
vids=V(network.full),
type = "local")
mails.lay <- edges.full[(edges.full$sender == "kenneth.lay@enron.com" &
as.Date(edges.full$date.R) > "2001-07-01 00:00:00") |
(edges.full$receiver == "kenneth.lay@enron.com" &
as.Date(edges.full$date.R) > "2001-07-01 00:00:00")
,]
mails.lay <- mails.lay[order(as.Date(mails.lay$date.R)),]
nrow(mails.lay)
# Para que veáis un mensaje de un empleado (al CEO), porque se lo jugaban todo
mails.lay[rownames(mails.lay) == 3473,]
# Pero por supuesto esto dependía del puesto que se ocupaba
mails.lay[rownames(mails.lay) == 60469,]
# Estos son todos los nodos que hablan con kenneth lay
# Muestra que puede no ser tan sencillo extraer el subgrafo
# pero siempre será posible a partir de los datos originales
nodes.with.lay <- unique(c(mails.lay$sender,
mails.lay$receiver))
network.kenneth.lay <- graph.data.frame(mails.lay[,c("sender",
"receiver",
"type",
"date",
"subject")],
directed = TRUE)
summary(network.kenneth.lay)
# Esto mismo se hace con las funciones neighborhood, pero con muchísimas más posibilidades
neighborhood.size(network.full,
1, # el orden o cuántos vecinos se tienen en cuenta
V(network.full)$lastName == "Lay")
# Este señor era el CEO, así que le resultaba fácil llegar a toda la empresa en 2 saltos
neighborhood.size(network.full,
2, # el orden o cuántos vecinos se tienen en cuenta
V(network.full)$lastName == "Lay")
network.kenneth.lay <- graph.neighborhood(network.full,
1,
V(network.full)$lastName == "Lay",
mode = "all") # puedes también "in" o "out"
# por lo que sea summary(network.kenneth.lay) no funciona igual
# pero esto sí
print(network.kenneth.lay)
pairs <- as.data.frame(unique(edges.full[c(1,2)]))
pairs <- pairs[order(pairs$sender, pairs$receiver),]
edges.ordered <- edges.full[order(edges.full$sender, edges.full$receiver),]
weight <- aggregate(edges.ordered[,3],
by = list(edges.ordered[,1],
edges.ordered[,2]),
length)
weight <- weight[order(weight$Group.1, weight$Group.2),]
# Verifiquemos con head y tail
head(pairs, n = 10L)
head(weight, n = 10L)
tail(pairs, n = 10L)
tail(weight, n = 10L)
pairs[seq(236:248),]
weight[seq(236:248),]
# Así que ya podemos mezclar directamente pairs y weight
pairs$weight <- weight$x
head(pairs)
# Bien, por tanto hemos sustituido la tabla total de CORREOS por una tabla de ENLACES
# Vamos a comenzar a construir el grafo social, igual que antes pero con esta tabla
network.sna <- graph.data.frame(pairs,
directed = TRUE,
vertices = nodes)
network.sna <- graph.data.frame(pairs,
directed = TRUE,
vertices = nodes)
summary(network.sna)
reciprocity(network.sna)
dyad.census(network.sna)
network.social <- as.undirected(network.sna,
mode = "collapse", ´#también estan "each" y "mutual"
edge.attr.comb="sum")
network.social <- as.undirected(network.sna,
mode = "collapse", #también estan "each" y "mutual"
edge.attr.comb="sum")
# La red de mr. Skilling
network.social[5]
# Lo pongo aquí únicamente como ilustración de lo poco interactivo que es dibujar grafo con igraph
plot(network.social,
main = "enron social network",
layout = layout.fruchterman.reingold(network.social),
vertex.label = V(network.social)$lastName,
vertex.size = V(network.social)$degree,
edge.curved = T)
# ========================================================================
# 6- EXTRACCIÓN DE COMUNIDADES
# ========================================================================
# CAVEAT sobre tipo de grafo (dirigido y no dirigido) y disponibilidad algoritmos
# documentación específica aquí: http://igraph.wikidot.com/community-detection-in-r
# Hay muchos algoritmos detección comunidades, es un área en continuo movimiento
# El algoritmo que implementa gephi es el de
# Vincent D Blondel, Jean-Loup Guillaume, Renaud Lambiotte, Etienne Lefebvre,
# Fast unfolding of communities in large networks,
# in Journal of Statistical Mechanics: Theory and Experiment 2008 (10), P1000
# Y está implementado en la siguiente función igraph
# http://igraph.sourceforge.net/doc/R/multilevel.community.html
communities <- multilevel.community(network.social)
str(communities)
comms.df <- data.frame(row.names = seq(1:149))
comms.df$Email_id <- communities$names
comms.df$community <- communities$membership
# Y ya sólo queda añadir la comunidad de cada nodo a la tabla original de nodos
str(nodes)
nodes.def <- merge(nodes, comms.df,
by.x = "Email_id",
by.y = "Email_id")
str(nodes.def)
head(nodes.def)
plot(table(nodes.def$community))
# ========================================================================
# 7- VISUALIZACIÓN DE GRAFOS
# ========================================================================
# There are currently three different functions in the igraph package which can draw graph in various ways:
# plot.igraph does simple non-interactive 2D plotting to R devices.
# Actually it is an implementation of the plot generic function, so you can write plot(graph)
# instead of plot.igraph(graph). As it used the standard R devices it supports every output
# format for which R has an output device.
# The list is quite impressing: PostScript, PDF files, XFig files, SVG files, JPG, PNG and of course
# you can plot to the screen as well using the default devices, or the good-looking anti-aliased Cairo device.
# See plot.igraph for some more information.
?plot.igraph
plot(network.social)
# Primera recomendación: intentar dibujar con igraph un grafo grande -y este de enron *no es enorme*
# es bastante inútil. Si tienes que hacerlo o es importante -> USA GEPHI
# Hay que hacer subgrafos.
# Extraigamos la comunidad "de los CEOs" (Lay y Skilling)
str(nodes.def)
nodes.def[nodes.def$lastName == "Lay",]
nodes.def[nodes.def$community == 8, c(2:9)]
com.ceos <- induced.subgraph(network.social,
V(network.social)$community == 8,
impl = "auto") # Ver ayuda
summary(com.ceos)
str(nodes.def)
nodes.def[nodes.def$lastName == "Lay",]
nodes.def[nodes.def$community == 8, c(2:9)]
com.ceos <- induced.subgraph(network.social,
V(network.social)$community == 8,
impl = "auto") # Ver ayuda
summary(com.ceos)
com.ceos <- induced.subgraph(network.social,
V(network.social)$community == 8,
impl = "auto") # Ver ayuda
summary(com.ceos)
